<input type="button" id="search" value="file-search">

<h2>상태</h2>
<div id="status1">
    <p> 현재 페이지: 0  </p>
    <p> 남은 페이지: 0  </p>
</div>
<div id="status2">
    <p> 현재 게시물 번호: 0 </p>
</div>

<h2>발견된 게시물</h2>
<table>
    <thead>
        <tr>
            <th>글 번호</th>
            <th>파일명</th>
        </tr>
    </thead>
    <tbody id="posts">
    </tbody>
</table>

<script>
    class indexPage {
        constructor() {
            this.init();
            this.addEvents();
        }

        init() {
            window.onload = () => {
                const savedValue = JSON.parse(sessionStorage.getItem('inputs'));
                if(savedValue) {
                    document.getElementById('gallery').value = savedValue.galleryType || '';
                    document.getElementById('galleryId').value = savedValue.GID || '';
                    document.getElementById('limit').value = savedValue.limit || '';
                    document.getElementById('start-page').value = savedValue.startPage || 1;
                    document.getElementById('is-proxy').checked = savedValue.isProxy || false;
                }
            };

            this.statusDiv1 = document.getElementById('status1');
            this.statusDiv2 = document.getElementById('status2');
            this.postsTbody = document.getElementById('posts');
            this.isProxy = document.getElementById('is-proxy');
            this.isTest = document.getElementById('is-test');
            this.stopBtn = document.getElementById('stop');
            this.searchBtn = document.getElementById('search');
            this.mode = document.getElementById('mode');
            this.saveOptions = document.getElementById('save-options');
            this.inputStatus(false);
        }

        addEvents() {
            this.mode.addEventListener('change', () => {
                location.href = `/?mode=${this.mode.value}`;
            });

            this.saveOptions.addEventListener('click', () => {
                this.getValueFromUsers();
                sessionStorage.setItem('inputs', JSON.stringify({
                    galleryType: this.galleryType,
                    GID: this.GID, 
                    limit: this.limit,
                    startPage: this.startPage,
                    isProxy: this.isProxy.checked,
                }));
            });
        
            this.stopBtn.addEventListener('click', () => {
                this.stopSearch();
            })

            this.searchBtn.addEventListener('click', () => {
                this.searchFilenameFromSite();
            })
        }

        inputStatus(v) {
            this.searchBtn.disabled = v;
            this.stopBtn.disabled = !v;
        }

        getValueFromUsers() {
            this.galleryType = document.getElementById('gallery').value;
            this.GID = document.getElementById('galleryId').value.trim();
            this.limit = document.getElementById('limit').value.trim() || 1;
            this.startPage = document.getElementById('start-page').value.trim();
        }

        async searchFilenameFromSite() {
            this.getValueFromUsers();

            if(!(this.GID && this.limit < 1001 && this.startPage > 0)) {
                alert('유효한 값을 입력하세요.');
                return;
            }
            this.inputStatus(true);

            this.postsTbody.innerHTML = '';

            this.statusDiv1.innerHTML = `
                <p> 현재 페이지: ${this.startPage}    </p>
                <p> 남은 페이지: ${this.limit}  </p>`;

            try {
                const response = await fetch(`/api/client-input`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        galleryType: this.galleryType,
                        GID: this.GID, 
                        mode: this.mode.value,
                        isProxy: this.isProxy.checked,
                        limit: this.limit, 
                        startPage: this.startPage,
                    })
                });

                if(!response.ok) {
                    alert('서버와의 통신이 원활하지 않음.');
                    return;
                }
                
                const payload = await response.json();
                console.log('Search initiation response:', payload);

                this.jobId = payload.jobId;
                this._setupSSEListener();
            
            } catch (error) {
                console.error('Error:', error);
                this._updateStatus(`<p style="color: red;">오류 발생: ${error.message}</p>`, true);
                this.inputStatus(false);
            }
        }

        _setupSSEListener() {
            if (this.eventSource) {
                this.eventSource.close();
            }
            
            this.eventSource = new EventSource(`/api/post/filename?jobId=${this.jobId}`);
                
            this.eventSource.addEventListener('status', (event) => {
                const data = JSON.parse(event.data);
                this.statusDiv1.innerHTML = `
                <p> 현재 페이지: ${data.curPage}    </p>
                <p> 남은 페이지: ${data.restPage}  </p>`;
            });
            
            this.eventSource.addEventListener('post', (event) => {
                const data = JSON.parse(event.data);
                this.postsTbody.innerHTML += `
                    <td>
                        <a href="https://gall.dcinside.com/${this.galleryType}board/view/?id=${this.GID}&no=${data.no}" target="_blank">
                            ${data.no}
                        </a>
                    </td>
                    <td>${data.filename}</td>`;
            });

            this.eventSource.addEventListener('no', (event) => {
                const data = JSON.parse(event.data);
                this.statusDiv2.innerHTML = `
                <p> 현재 게시물 번호: ${data.no}</p>`;
            });

            this.eventSource.addEventListener('complete', (event) => {
                console.log('SSE stream complete.');
                this._updateStatus(`<p> 작업 완료. </p>`, true);
                this._closeSSEConnection();
                this.inputStatus(false);
            });

            this.eventSource.onerror = (error) => {
                console.error('EventSource error:', error);
                this._updateStatus(`<p style="color: red;"> 데이터 수신 중 오류 발생. </p>`, true);
                this._closeSSEConnection();
                this.inputStatus(false);
            };
        }

        _updateStatus(message, append = false) {
            if (append) {
                this.statusDiv1.innerHTML += message;
            } else {
                this.statusDiv1.innerHTML = message;
            }
        }

        _closeSSEConnection() {
            if (this.eventSource) {
                this.eventSource.close();
                this.eventSource = null;
                console.log('EventSource connection closed.');
            }
        }

        async stopSearch() {
            console.log('Stopping search...');
            this._updateStatus('<p> 중지 요청 중... </p>', true);
            this.stopBtn.disabled = true;

            try {
                const mode = this.mode.value;
                const response = await fetch(`/api/user/stop?mode=${mode}&jobId=${this.jobId}`);
                if (!response.ok) {
                    throw new Error(`서버 응답 오류 (${response.status})`);
                }
                this._updateStatus('<p> 중지 요청 성공. </p>', true);
                console.log('Stop request successful.');

            } catch (error) {
                console.error('Error stopping search:', error);
                this._updateStatus(`<p style="color: red;"> 중지 요청 실패: ${error.message} </p>`, true);
            }
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        new indexPage();
    });
</script>






